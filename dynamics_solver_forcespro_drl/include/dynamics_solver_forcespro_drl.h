/*
dynamics_solver_forcespro_drl : A fast customized optimization solver.

Copyright (C) 2013-2025 EMBOTECH AG [info@embotech.com]. All rights reserved.


This software is intended for simulation and testing purposes only. 
Use of this software for any commercial purpose is prohibited.

This program is distributed in the hope that it will be useful.
EMBOTECH makes NO WARRANTIES with respect to the use of the software 
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
PARTICULAR PURPOSE. 

EMBOTECH shall not have any liability for any damage arising from the use
of the software.

This Agreement shall exclusively be governed by and interpreted in 
accordance with the laws of Switzerland, excluding its principles
of conflict of laws. The Courts of Zurich-City shall have exclusive 
jurisdiction in case of any dispute.

*/

/* Generated by FORCESPRO v6.4.0 on Monday, October 13, 2025 at 1:49:19 PM */
#ifndef dynamics_solver_forcespro_drl_H
#define dynamics_solver_forcespro_drl_H

#ifndef SOLVER_STDIO_H
#define SOLVER_STDIO_H
#include <stdio.h>
#endif
#ifndef SOLVER_STRING_H
#define SOLVER_STRING_H
#include <string.h>
#endif


#ifndef SOLVER_STANDARD_TYPES
#define SOLVER_STANDARD_TYPES

typedef signed char solver_int8_signed;
typedef unsigned char solver_int8_unsigned;
typedef char solver_int8_default;
typedef signed short int solver_int16_signed;
typedef unsigned short int solver_int16_unsigned;
typedef short int solver_int16_default;
typedef signed int solver_int32_signed;
typedef unsigned int solver_int32_unsigned;
typedef int solver_int32_default;
typedef signed long long int solver_int64_signed;
typedef unsigned long long int solver_int64_unsigned;
typedef long long int solver_int64_default;

#endif


/* DATA TYPE ------------------------------------------------------------*/
typedef double dynamics_solver_forcespro_drl_float;
typedef double dynamics_solver_forcespro_drl_ldl_s_float;
typedef double dynamics_solver_forcespro_drl_ldl_r_float;
typedef double dynamics_solver_forcespro_drl_callback_float;

typedef double dynamics_solver_forcespro_drlinterface_float;

/* SOLVER SETTINGS ------------------------------------------------------*/

/* MISRA-C compliance */
#ifndef MISRA_C_dynamics_solver_forcespro_drl
#define MISRA_C_dynamics_solver_forcespro_drl (0)
#endif

/* restrict code */
#ifndef RESTRICT_CODE_dynamics_solver_forcespro_drl
#define RESTRICT_CODE_dynamics_solver_forcespro_drl (0)
#endif

/* print level */
#ifndef SET_PRINTLEVEL_dynamics_solver_forcespro_drl
#define SET_PRINTLEVEL_dynamics_solver_forcespro_drl    (0)
#endif

/* timing */
#ifndef SET_TIMING_dynamics_solver_forcespro_drl
#define SET_TIMING_dynamics_solver_forcespro_drl    (1)
#endif

/* Numeric Warnings */
/* #define PRINTNUMERICALWARNINGS */

/* maximum number of iterations  */
#define SET_MAXIT_dynamics_solver_forcespro_drl			(30)	

/* scaling factor of line search (FTB rule) */
#define SET_FLS_SCALE_dynamics_solver_forcespro_drl		(dynamics_solver_forcespro_drl_float)(0.99)      

/* maximum number of supported elements in the filter */
#define MAX_FILTER_SIZE_dynamics_solver_forcespro_drl	(30) 

/* whether callback return values should be checked */
#define EXTFUNC_RETURN_dynamics_solver_forcespro_drl (0)

/* SOLVER RETURN CODES----------------------------------------------------------*/
/* solver has converged within desired accuracy */
#define OPTIMAL_dynamics_solver_forcespro_drl      (1)

/* maximum number of iterations has been reached */
#define MAXITREACHED_dynamics_solver_forcespro_drl (0)

/* solver has stopped due to a timeout */
#define TIMEOUT_dynamics_solver_forcespro_drl   (2)

/* solver stopped externally */
#define EXIT_EXTERNAL_dynamics_solver_forcespro_drl (3)

/* wrong number of inequalities error */
#define INVALID_NUM_INEQ_ERROR_dynamics_solver_forcespro_drl  (-4)

/* factorization error */
#define FACTORIZATION_ERROR_dynamics_solver_forcespro_drl   (-5)

/* NaN encountered in function evaluations */
#define BADFUNCEVAL_dynamics_solver_forcespro_drl  (-6)

/* no progress in method possible */
#define NOPROGRESS_dynamics_solver_forcespro_drl   (-7)

/* regularization error */
#define REGULARIZATION_ERROR_dynamics_solver_forcespro_drl   (-9)

/* invalid values in parameters */
#define PARAM_VALUE_ERROR_dynamics_solver_forcespro_drl   (-11)

/* too small timeout given */
#define INVALID_TIMEOUT_dynamics_solver_forcespro_drl   (-12)

/* thread error */
#define THREAD_FAILURE_dynamics_solver_forcespro_drl  (-98)

/* locking mechanism error */
#define LOCK_FAILURE_dynamics_solver_forcespro_drl  (-99)

/* licensing error - solver not valid on this machine */
#define LICENSE_ERROR_dynamics_solver_forcespro_drl  (-100)

/* Insufficient number of internal memory instances.
 * Increase codeoptions.max_num_mem. */
#define MEMORY_INVALID_dynamics_solver_forcespro_drl (-101)

/* Number of threads larger than specified.
 * Increase codeoptions.nlp.max_num_threads. */
#define NUMTHREADS_INVALID_dynamics_solver_forcespro_drl (-102)

/* invalid value (<= -100) returned by external function */
#define INVALIDFUNCEXIT_dynamics_solver_forcespro_drl (-200)

/* bad value returned by external function */
#define BADFUNCEXIT_dynamics_solver_forcespro_drl(status) (status > -100? status - 200 : INVALIDFUNCEXIT_dynamics_solver_forcespro_drl)

/* invalid value (<= -100) returned by external parallel implementation */
#define INVALIDPARALLELEXIT_dynamics_solver_forcespro_drl (-300)

/* bad value returned by external parallel implementation */
#define BADPARALLELEXIT_dynamics_solver_forcespro_drl(status) (status > -100? status - 300 : INVALIDPARALLELEXIT_dynamics_solver_forcespro_drl)

/* INTEGRATORS RETURN CODE ------------*/
/* Integrator ran successfully */
#define INTEGRATOR_SUCCESS (11)
/* Number of steps set by user exceeds maximum number of steps allowed */
#define INTEGRATOR_MAXSTEPS_EXCEEDED (12)


/* MEMORY STRUCT --------------------------------------------------------*/
typedef struct dynamics_solver_forcespro_drl_mem dynamics_solver_forcespro_drl_mem;
#ifdef __cplusplus
extern "C" {
#endif
/* MEMORY STRUCT --------------------------------------------------------*/
extern dynamics_solver_forcespro_drl_mem * dynamics_solver_forcespro_drl_external_mem(void * mem_ptr, solver_int32_unsigned i_mem, size_t mem_size);
extern size_t dynamics_solver_forcespro_drl_get_mem_size( void );
extern size_t dynamics_solver_forcespro_drl_get_const_size( void );
#ifdef __cplusplus
}
#endif

/* PARAMETERS -----------------------------------------------------------*/
/* fill this with data before calling the solver! */
typedef struct
{
    /* vector of size 420 */
    dynamics_solver_forcespro_drl_float x0[420];

    /* vector of size 9 */
    dynamics_solver_forcespro_drl_float xinit[9];

    /* vector of size 805 */
    dynamics_solver_forcespro_drl_float all_parameters[805];


} dynamics_solver_forcespro_drl_params;


/* OUTPUTS --------------------------------------------------------------*/
/* the desired variables are put here by the solver */
typedef struct
{
    /* column vector of length 12 */
    dynamics_solver_forcespro_drl_float x01[12];

    /* column vector of length 12 */
    dynamics_solver_forcespro_drl_float x02[12];

    /* column vector of length 12 */
    dynamics_solver_forcespro_drl_float x03[12];

    /* column vector of length 12 */
    dynamics_solver_forcespro_drl_float x04[12];

    /* column vector of length 12 */
    dynamics_solver_forcespro_drl_float x05[12];

    /* column vector of length 12 */
    dynamics_solver_forcespro_drl_float x06[12];

    /* column vector of length 12 */
    dynamics_solver_forcespro_drl_float x07[12];

    /* column vector of length 12 */
    dynamics_solver_forcespro_drl_float x08[12];

    /* column vector of length 12 */
    dynamics_solver_forcespro_drl_float x09[12];

    /* column vector of length 12 */
    dynamics_solver_forcespro_drl_float x10[12];

    /* column vector of length 12 */
    dynamics_solver_forcespro_drl_float x11[12];

    /* column vector of length 12 */
    dynamics_solver_forcespro_drl_float x12[12];

    /* column vector of length 12 */
    dynamics_solver_forcespro_drl_float x13[12];

    /* column vector of length 12 */
    dynamics_solver_forcespro_drl_float x14[12];

    /* column vector of length 12 */
    dynamics_solver_forcespro_drl_float x15[12];

    /* column vector of length 12 */
    dynamics_solver_forcespro_drl_float x16[12];

    /* column vector of length 12 */
    dynamics_solver_forcespro_drl_float x17[12];

    /* column vector of length 12 */
    dynamics_solver_forcespro_drl_float x18[12];

    /* column vector of length 12 */
    dynamics_solver_forcespro_drl_float x19[12];

    /* column vector of length 12 */
    dynamics_solver_forcespro_drl_float x20[12];

    /* column vector of length 12 */
    dynamics_solver_forcespro_drl_float x21[12];

    /* column vector of length 12 */
    dynamics_solver_forcespro_drl_float x22[12];

    /* column vector of length 12 */
    dynamics_solver_forcespro_drl_float x23[12];

    /* column vector of length 12 */
    dynamics_solver_forcespro_drl_float x24[12];

    /* column vector of length 12 */
    dynamics_solver_forcespro_drl_float x25[12];

    /* column vector of length 12 */
    dynamics_solver_forcespro_drl_float x26[12];

    /* column vector of length 12 */
    dynamics_solver_forcespro_drl_float x27[12];

    /* column vector of length 12 */
    dynamics_solver_forcespro_drl_float x28[12];

    /* column vector of length 12 */
    dynamics_solver_forcespro_drl_float x29[12];

    /* column vector of length 12 */
    dynamics_solver_forcespro_drl_float x30[12];

    /* column vector of length 12 */
    dynamics_solver_forcespro_drl_float x31[12];

    /* column vector of length 12 */
    dynamics_solver_forcespro_drl_float x32[12];

    /* column vector of length 12 */
    dynamics_solver_forcespro_drl_float x33[12];

    /* column vector of length 12 */
    dynamics_solver_forcespro_drl_float x34[12];

    /* column vector of length 12 */
    dynamics_solver_forcespro_drl_float x35[12];


} dynamics_solver_forcespro_drl_output;


/* SOLVER INFO ----------------------------------------------------------*/
/* diagnostic data from last interior point step */
typedef struct
{
    /* scalar: iteration number */
    solver_int32_default it;

    /* scalar: number of iterations needed to optimality (branch-and-bound) */
    solver_int32_default it2opt;

    /* scalar: inf-norm of equality constraint residuals */
    dynamics_solver_forcespro_drl_float res_eq;

    /* scalar: inf-norm of inequality constraint residuals */
    dynamics_solver_forcespro_drl_float res_ineq;

    /* scalar: norm of stationarity condition */
    dynamics_solver_forcespro_drl_float rsnorm;

    /* scalar: max of all complementarity violations */
    dynamics_solver_forcespro_drl_float rcompnorm;

    /* scalar: primal objective */
    dynamics_solver_forcespro_drl_float pobj;

    /* scalar: dual objective */
    dynamics_solver_forcespro_drl_float dobj;

    /* scalar: duality gap := pobj - dobj */
    dynamics_solver_forcespro_drl_float dgap;

    /* scalar: relative duality gap := |dgap / pobj | */
    dynamics_solver_forcespro_drl_float rdgap;

    /* scalar: duality measure */
    dynamics_solver_forcespro_drl_float mu;

    /* scalar: duality measure (after affine step) */
    dynamics_solver_forcespro_drl_float mu_aff;

    /* scalar: centering parameter */
    dynamics_solver_forcespro_drl_float sigma;

    /* scalar: number of backtracking line search steps (affine direction) */
    solver_int32_default lsit_aff;

    /* scalar: number of backtracking line search steps (combined direction) */
    solver_int32_default lsit_cc;

    /* scalar: step size (affine direction) */
    dynamics_solver_forcespro_drl_float step_aff;

    /* scalar: step size (combined direction) */
    dynamics_solver_forcespro_drl_float step_cc;

    /* scalar: total solve time */
    dynamics_solver_forcespro_drl_float solvetime;

    /* scalar: time spent in function evaluations */
    dynamics_solver_forcespro_drl_float fevalstime;

    /* column vector of length 8: solver ID of FORCESPRO solver */
    solver_int32_default solver_id[8];


} dynamics_solver_forcespro_drl_info;







/* SOLVER FUNCTION DEFINITION -------------------------------------------*/
/* Time of Solver Generation: (UTC) Monday, October 13, 2025 1:49:24 PM */
/* User License expires on: (UTC) Thursday, May 14, 2026 10:00:00 PM (approx.) (at the time of code generation) */
/* Solver Static License expires on: (UTC) Thursday, May 14, 2026 10:00:00 PM (approx.) */
/* Solver Id: 693bfb62-adbe-427d-ae23-4a4ca6af0159 */
/* Host Compiler Version: d76500f0 */
/* Target Compiler Version: unused */
/* examine exitflag before using the result! */
#ifdef __cplusplus
extern "C" {
#endif		

typedef solver_int32_default (*dynamics_solver_forcespro_drl_extfunc)(dynamics_solver_forcespro_drl_float* x, dynamics_solver_forcespro_drl_float* y, dynamics_solver_forcespro_drl_float* lambda, dynamics_solver_forcespro_drl_float* params, dynamics_solver_forcespro_drl_float* pobj, dynamics_solver_forcespro_drl_float* g, dynamics_solver_forcespro_drl_float* c, dynamics_solver_forcespro_drl_float* Jeq, dynamics_solver_forcespro_drl_float* h, dynamics_solver_forcespro_drl_float* Jineq, dynamics_solver_forcespro_drl_float* H, solver_int32_default stage, solver_int32_default iterations, solver_int32_default threadID);

extern solver_int32_default dynamics_solver_forcespro_drl_solve(dynamics_solver_forcespro_drl_params *params, dynamics_solver_forcespro_drl_output *output, dynamics_solver_forcespro_drl_info *info, dynamics_solver_forcespro_drl_mem *mem, FILE *fs, dynamics_solver_forcespro_drl_extfunc evalextfunctions_dynamics_solver_forcespro_drl);



/*Integrator declarations */
typedef const solver_int32_default* (*cDynJacXsparsity)( solver_int32_default i );
typedef const solver_int32_default* (*cDynJacUsparsity)( solver_int32_default i );
typedef solver_int32_default (*fConDynamics)( const dynamics_solver_forcespro_drl_callback_float** arg, dynamics_solver_forcespro_drl_callback_float** res, solver_int32_default* iw, dynamics_solver_forcespro_drl_callback_float* w, solver_int32_default mem );
typedef solver_int32_default (*fConJacStateDynamics)( const dynamics_solver_forcespro_drl_callback_float** arg, dynamics_solver_forcespro_drl_callback_float** res, solver_int32_default* iw, dynamics_solver_forcespro_drl_callback_float* w, solver_int32_default mem );
typedef solver_int32_default (*fConJacInputDynamics)( const dynamics_solver_forcespro_drl_callback_float** arg, dynamics_solver_forcespro_drl_callback_float** res, solver_int32_default* iw, dynamics_solver_forcespro_drl_callback_float* w, solver_int32_default mem );

void dynamics_solver_forcespro_drl_rkfour_0(const dynamics_solver_forcespro_drl_callback_float * const z, const dynamics_solver_forcespro_drl_callback_float * const p, dynamics_solver_forcespro_drl_float * const c, dynamics_solver_forcespro_drl_float * const jacc,
            fConDynamics cDyn0rd, fConDynamics cDyn, const solver_int32_default threadID);








#ifdef __cplusplus
}
#endif

#endif
